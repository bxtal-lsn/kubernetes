---
# tasks/kubernetes/node-setup.yml
- name: Update apt cache
  apt:
    update_cache: yes

- name: Install apt transport packages
  apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg
    state: present

# Install containerd directly from GitHub release
- name: Install containerd directly from release
  include_tasks: install-containerd.yml

# Continue with Kubernetes repository setup and installation
- name: Get latest Kubernetes version
  shell: curl -L -s https://dl.k8s.io/release/stable.txt | awk 'BEGIN { FS="." } { printf "%s.%s", $1, $2 }'
  register: kube_latest
  changed_when: false

- name: Create keyrings directory
  file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'

- name: Download Kubernetes apt key
  get_url:
    url: "https://pkgs.k8s.io/core:/stable:/{{ kube_latest.stdout }}/deb/Release.key"
    dest: /tmp/kubernetes-release.key
    mode: '0644'

- name: Add Kubernetes apt key
  shell: cat /tmp/kubernetes-release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
  args:
    creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg

- name: Add Kubernetes apt repository
  copy:
    content: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/{{ kube_latest.stdout }}/deb/ /"
    dest: /etc/apt/sources.list.d/kubernetes.list
    owner: root
    group: root
    mode: '0644'

- name: Update apt cache
  apt:
    update_cache: yes

- name: Install Kubernetes components
  apt:
    name: "{{ kubernetes_packages }}"
    state: present

- name: Hold Kubernetes packages
  dpkg_selections:
    name: "{{ item }}"
    selection: hold
  loop:
    - kubelet
    - kubeadm
    - kubectl

- name: Check if crictl is installed
  command: which crictl
  register: crictl_check
  changed_when: false
  failed_when: false

- name: Configure crictl
  shell: |
    crictl config \
      --set runtime-endpoint=unix:///run/containerd/containerd.sock \
      --set image-endpoint=unix:///run/containerd/containerd.sock
  changed_when: false
  when: crictl_check.rc == 0

- name: Get primary network interface IP
  shell: ip -4 addr show {{ ansible_default_ipv4.interface }} | grep "inet" | head -1 | awk '{print $2}' | cut -d/ -f1
  register: node_ip
  changed_when: false

- name: Configure kubelet node IP
  copy:
    content: "KUBELET_EXTRA_ARGS='--node-ip {{ node_ip.stdout }}'"
    dest: /etc/default/kubelet
    owner: root
    group: root
    mode: '0644'
